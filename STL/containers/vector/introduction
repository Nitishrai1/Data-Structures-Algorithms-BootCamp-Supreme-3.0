// // dynamic array
// Iterators
// begin() – Returns an iterator pointing to the first element in the vector
// end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector
// rbegin() – Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
// rend() – Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)
// cbegin() – Returns a constant iterator pointing to the first element in the vector.
// cend() – Returns a constant iterator pointing to the theoretical element that follows the last element in the vector.
// crbegin() – Returns a constant reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
// crend() – Returns a constant reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)

// // C++ program to illustrate the 
// Capacity
// size() – Returns the number of elements in the vector.
// max_size() – Returns the maximum number of elements that the vector can hold.
// capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
// resize(n) – Resizes the container so that it contains ‘n’ elements.
// empty() – Returns whether the container is empty.
// shrink_to_fit() – Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.
// reserve() – Requests that the vector capacity be at least enough to contain n elements.
// Element access
// reference operator [g] – Returns a reference to the element at position ‘g’ in the vector
// at(g) – Returns a reference to the element at position ‘g’ in the vector
// front() – Returns a reference to the first element in the vector
// back() – Returns a reference to the last element in the vector
// data() – Returns a direct pointer to the memory array used internally by the vector to store its owned elements.
// Modifiers
// assign() – It assigns new value to the vector elements by replacing old ones
// push_back() – It push the elements into a vector from the back
// pop_back() – It is used to pop or remove elements from a vector from the back.
// insert() – It inserts new elements before the element at the specified position
// erase() – It is used to remove elements from a container from the specified position or range.
// swap() – It is used to swap the contents of one vector with another vector of same type. Sizes may differ.
// clear() – It is used to remove all the elements of the vector container
// emplace() – It extends the container by inserting new element at position
// emplace_back() – It is used to insert a new element into the vector container, the new element is added to the end of the vector
// All Member Functions of std::vector
// Following is the list of all member functions of std::vector class in C++:

// Vector Function

// Description

// push_back()

// Adds an element to the end of the vector.
// pop_back()

// Removes the last element of the vector.
// size()

// Returns the number of elements in the vector.
// max_size()

// Returns the maximum number of elements that the vector can hold.
// resize()

// Changes the size of the vector.
// empty()

// Checks if the vector is empty.
// operator[]

// Accesses the element at a specific position.
// at()

// Accesses the element at a specific position, with bounds checking.
// front()

// Accesses the first element of the vector.
// back()

// Accesses the last element of the vector.
// begin()

// Returns an iterator pointing to the first element of the vector.
// end()

// Returns an iterator pointing to the past-the-end element of the vector.
// rbegin()

// Returns a reverse iterator pointing to the last element of the vector.
// rend()

// Returns a reverse iterator pointing to the element preceding the first element of the vector.
// cbegin

// Returns const_iterator to beginning 
// cend

// Returns const_iterator to end
// crbegin

// Returns const_reverse_iterator to reverse beginning
// crend

// Returns const_reverse_iterator to reverse end
// insert()

// Inserts elements at a specific position in the vector.
// erase()

// Removes elements from a specific position or range in the vector.
// swap()

// Swaps the contents of the vector with those of another vector.
// clear()

// Removes all elements from the vector.
// emplace()

// Constructs and inserts an element in the vector.
// emplace_back()

// Constructs and inserts an element at the end of the vector.
// assign()

// Assigns new values to the vector elements by replacing old ones.
// capacity()

// Returns the size of the storage space currently allocated to the vector.
// reserve()

// Requests that the vector capacity be at least enough to contain a specified number of elements.
// shrink_to_fit()

// Reduces memory usage by freeing unused space.
// data()

// Returns a direct pointer to the memory array used internally by the vector to store its owned elements. 
// get_allocator

// Returns a copy of the allocator object associated with the vector.

// 2D Array
// vector<vector<int>> v1
// vector<vector<int>> v1(no:of rows,vector<int>(size,value));
